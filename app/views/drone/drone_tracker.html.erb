<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
</head>



<style>
    /* Set the size of the div element that contains the map */
    #map {
        height: 400px;  /* The height is 400 pixels */
        width: 100%;  /* The width is the width of the web page */
    }

    body {
        padding-top: 100px;
    }

    /* Tooltip container */
    .tooltip {
      position: relative;
      display: inline-block;
      border-bottom: 1px dotted black; /* If you want dots under the hoverable text */
    }

    /* Tooltip text */
    .tooltip .tooltiptext {
      visibility: hidden;
      width: 120px;
      background-color: #555;
      color: #fff;
      text-align: center;
      padding: 5px 0;
      border-radius: 6px;

      /* Position the tooltip text */
      position: absolute;
      z-index: 1;
      bottom: 125%;
      left: 50%;
      margin-left: -60px;

      /* Fade in tooltip */
      opacity: 0;
      transition: opacity 0.3s;
    }

    /* Tooltip arrow */
    .tooltip .tooltiptext::after {
      content: "";
      position: absolute;
      top: 100%;
      left: 50%;
      margin-left: -5px;
      border-width: 5px;
      border-style: solid;
      border-color: #555 transparent transparent transparent;
    }

    /* Show the tooltip text when you mouse over the tooltip container */
    .tooltip:hover .tooltiptext {
      visibility: visible;
      opacity: 1;
    }
</style>


<body>

<nav class="navbar navbar-expand-lg navbar-light bg-light fixed-top">
  <div class="container-fluid">
    <div class="navbar-header">
      <a class="navbar-brand" href="/">DroneTracker</a>
    </div>
    <ul class="nav navbar-nav">
      <div class="container">
        <div class="btn-group">
          <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Drone
          </button>
          <div class="dropdown-menu">
            <a class="dropdown-item" href="/drone/drone_list">Drone List</a>
            <a class="dropdown-item" href="/drone/drone_registration">Register a Drone</a>
          </div>
        </div>
        <a href="/missions" class="btn btn-primary" role="button">Mission List</a>
        <a href="/" class="btn btn-info" role="button">Home</a>
        <a href="https://validator.w3.org" class="btn btn-info" role="button">Validate this Site</a>
        <a href="/posts" class="btn btn-info" role="button">Forum</a>
        <% if user_signed_in? %>
          <% if current_user.admin %>
            <a href="/drone/users_lists" class="btn btn-info" role="button">User Management</a>
          <% end %>

          </div>
          </ul>
          <ul class="nav navbar-nav navbar-right">
            <div class="container">



              <li><p class="navbar-text">Signed in as <%= current_user.email %></p></li>
              <li><%= link_to "Sign out", destroy_user_session_path, method: :delete %></li>
        <% else %>
          <li><a href="/users/sign_up"><span class="glyphicon glyphicon-user"></span> Sign Up</a></li>
          <li><a href="/users/sign_in"><span class="glyphicon glyphicon-log-in"></span> Login</a></li>
        <% end %>

        </div>
        </ul>
        </div>
</nav>

<div class="container">

  <h3>Interactive Tracking System</h3>
</div>

<hr>

<!--The div element for the map -->
<div id="map"></div>
<script>
    var map;
    var navlog;
    var marker;

    function callNavLog() {
        var response = JSON.parse(
            $.ajax({type: "GET", url: "/drone/nav_logs_json?drone=<%= @drone.id %>", async: false}).responseText
        );

        console.log(response);

        return response;
    }


    // Initialize and add the map
    function initMap() {
        var response = callNavLog();
        navlog = {lat: response.gps_latitude, lng:response.gps_longitude};

        console.log(navlog);
        //
        // var locations = [];
        //
        // var i;
        // for (i = 0; i < navlogs.length; i++) {
        //     latlong = {lat: navlogs[i].gps_latitude, lng: navlogs[i].gps_longitude};
        //
        //     locations.push(latlong);
        // }

        // var last_element = 0;

        // var map_center = last_element;

        var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';

        // The location of AIT
        var ait = {lat: 14.0785, lng: 100.6140};

        // If no last location center at AIT
        var map_center;
        var map_zoom;
        if (!navlog){
            map_center = ait;
            map_zoom = 16;
        } else {
            map_center = navlog;
            map_zoom = 17;
        }

        // The map, centered at last location
        map = new google.maps.Map(
            document.getElementById('map'), {zoom: map_zoom, center: map_center,
                styles: [
                    {elementType: 'geometry', stylers: [{color: '#242f3e'}]},
                    {elementType: 'labels.text.stroke', stylers: [{color: '#242f3e'}]},
                    {elementType: 'labels.text.fill', stylers: [{color: '#746855'}]},
                    {
                        featureType: 'administrative.locality',
                        elementType: 'labels.text.fill',
                        stylers: [{color: '#d59563'}]
                    },
                    {
                        featureType: 'poi',
                        elementType: 'labels.text.fill',
                        stylers: [{color: '#d59563'}]
                    },
                    {
                        featureType: 'poi.park',
                        elementType: 'geometry',
                        stylers: [{color: '#263c3f'}]
                    },
                    {
                        featureType: 'poi.park',
                        elementType: 'labels.text.fill',
                        stylers: [{color: '#6b9a76'}]
                    },
                    {
                        featureType: 'road',
                        elementType: 'geometry',
                        stylers: [{color: '#38414e'}]
                    },
                    {
                        featureType: 'road',
                        elementType: 'geometry.stroke',
                        stylers: [{color: '#212a37'}]
                    },
                    {
                        featureType: 'road',
                        elementType: 'labels.text.fill',
                        stylers: [{color: '#9ca5b3'}]
                    },
                    {
                        featureType: 'road.highway',
                        elementType: 'geometry',
                        stylers: [{color: '#746855'}]
                    },
                    {
                        featureType: 'road.highway',
                        elementType: 'geometry.stroke',
                        stylers: [{color: '#1f2835'}]
                    },
                    {
                        featureType: 'road.highway',
                        elementType: 'labels.text.fill',
                        stylers: [{color: '#f3d19c'}]
                    },
                    {
                        featureType: 'transit',
                        elementType: 'geometry',
                        stylers: [{color: '#2f3948'}]
                    },
                    {
                        featureType: 'transit.station',
                        elementType: 'labels.text.fill',
                        stylers: [{color: '#d59563'}]
                    },
                    {
                        featureType: 'water',
                        elementType: 'geometry',
                        stylers: [{color: '#17263c'}]
                    },
                    {
                        featureType: 'water',
                        elementType: 'labels.text.fill',
                        stylers: [{color: '#515c6d'}]
                    },
                    {
                        featureType: 'water',
                        elementType: 'labels.text.stroke',
                        stylers: [{color: '#17263c'}]
                    }
                ]});

        // var locations = [
        //     {lat: 14.081012, lng: 100.612743},
        //     {lat: 14.079269, lng: 100.609573},
        //     {lat: 14.076557, lng: 100.613988}
        // ];

        setMarker(map, navlog);

        // return [map, navlog];

        // var markers = locations.map(function(location, q) {
        //     var marker = new google.maps.Marker({
        //         position: navlog,
        //         // label: labels[q % last_element.length],
        //         map: map
        //     });
        //     return marker
        // });
    };

    function setMarker(map, navlog){
        console.log("Setting markers");
        marker = new google.maps.Marker({
            position: navlog,
            // label: labels[q % last_element.length],
            map: map,
            animation: google.maps.Animation.DROP,
        });
    }

    function reloadMarker() {
        console.log("Reloading markers");

        var response = callNavLog();
        navlog = {lat: response.gps_latitude, lng:response.gps_longitude};

        marker.setMap(null);

        setMarker(map, navlog);
    }

    setInterval(function(){
        while (true){
            reloadMarker().reload();
        }
    }, 5000);
</script>
<!--Load the API from the specified URL
* The async attribute allows the browser to render the page while the API loads
* The key parameter will contain your own API key (which is not needed for this tutorial)
* The callback parameter executes the initMap() function
-->
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDX3R98Z8sYA3M0xDyps10H0pMIIoSpCZY&callback=initMap">
</script>



<hr>

<div class="container">

  <h3>Drone Details <%= link_to 'Check Status', drone_check_status_path(drone: @drone.id), class: "btn btn-primary" %> <button class='btn btn-primary' onclick="loadDoc()">Request lastest data</button></h3>


    <%= link_to 'Release Servo', drone_release_servo_path(drone: @drone.id), class: "btn btn-primary" %>
    <%= link_to 'Lock Servo', drone_lock_servo_path(drone: @drone.id), class: "btn btn-primary" %>
  </h3>

  <p><b>Please make sure the drone is disarmed (not in flight) and the hardware safety switch is on.</b> Drone will emit a failure to arm sound to confirm connection.</p>
</div>

<div class="container">
  <table class="table">
    <tr>
      <td><strong>Name</strong></td>
      <td><%= @drone.name %></td>
    </tr>

    <tr>
      <td><strong>Status</strong></td>
      <% if @drone.status != "Available" %>
        <td><strong><%= @drone.status %></strong></td>
      <% else %>
        <td><%= @drone.status %></td>
      <% end %>
    </tr>

    <tr>
      <td><strong>Retrieved Date</strong></td>
      <td><%= @date.blank? ? "Not Available" : @date %> </td>
    </tr>

    <tr>
      <td><strong>Last Location</strong></td>
      <td><strong>LATITUDE: </strong> <%= @gps_latitude.blank? ? "Not Available" : @gps_latitude %> <p id="demo3">,<strong>LONGITUDE:</strong>  <%= @gps_longitude.blank? ? "Not Available" : @gps_longitude %> <p id="demo4"></td>
    </tr>

    <tr>
      <td><strong>Alititude (Metre)</strong><p id="demo2"></p></td>
      <td><%= @altitude.blank? ? "Not Available" : @altitude %> </td>
    </tr>

    <tr>
      <td><strong>Battery Voltage (Volt)</strong></td>
      <td><%= @battery_voltage.blank? ? "Not Available" : @battery_voltage %><p id="demo5"></p> </td>
    </tr>

    <tr>
      <td><strong>Battery Level (Percentage)</strong></td>
      <td><%= @battery_level.blank? ? "Not Available" : @battery_level %> <p id="demo6"></p></td>
    </tr>

    <tr>
      <td><strong>Battery Current (Ampere)</strong></td>
      <td><%= @battery_current.blank? ? "Not Available" : @battery_current %> <p id="demo7"></p></td>
    </tr>

    <tr>
      <td><strong>EKF</strong></td>
      <td><%= @ekf_ok.blank? ? "Not Available" : @ekf_ok %><p id="demo8"></p> </td>
    </tr>

    <tr>
      <td><strong>Armable?</strong></td>
      <td><%= @is_armable.blank? ? "Not Available" : @is_armable %><p id="demo9"></p> </td>
    </tr>

    <tr>
      <td><strong>System Status</strong></td>
      <td><%= @system_status.blank? ? "Not Available" : @system_status %><p id="demo10"></p> </td>
    </tr>

    <tr>
      <td><strong>Mode</strong></td>
      <td><%= @mode.blank? ? "Not Available" : @mode %><p id="demo11"></p>  </td>
    </tr>

    <tr>
      <td><strong>Armed</strong></td>
      <td><%= @armed.blank? ? "Not Available" : @armed %><p id="demo12"></p>   </td>
    </tr>
  </table>
</div>
<html>
<body>


<!--<h2>The XMLHttpRequest Object</h2>-->

<button type="button" onclick="loadDoc()">Request data</button>

<!--<p id="demo"></p>-->

<!--<p id="demo2"></p>-->

<!--<p id="demo3"></p>-->

<!--<p id="demo4"></p>-->

<!--<p id="demo5"></p>-->

<!--<p id="demo6"></p>-->
<!--<p id="demo7"></p>-->

<!--<p id="demo8"></p>-->

<!--<p id="demo9"></p>-->

<!--<p id="demo10"></p>-->

<!--<p id="demo11"></p>-->

<!--<p id="demo12"></p>-->
<script>
    function loadDoc() {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4 && this.status == 200) {
               var smth= document.getElementById("demo13").innerHTML = this.responseText;
               var obj = JSON.parse(smth)
                 document.getElementById("demo2").innerHTML = obj.altitude;
                 document.getElementById("demo3").innerHTML = obj.gps_latitude;
                document.getElementById("demo4").innerHTML = obj.gps_longitude;
                document.getElementById("demo5").innerHTML = obj.battery_voltage;
                document.getElementById("demo6").innerHTML = obj.battery_level;
                document.getElementById("demo7").innerHTML = obj.battery_current;
                document.getElementById("demo8").innerHTML = obj.ekf_ok;
                document.getElementById("demo9").innerHTML = obj.is_armable;
                document.getElementById("demo10").innerHTML = obj.system_status;
                document.getElementById("demo11").innerHTML = obj.mode;
                document.getElementById("demo12").innerHTML = obj.armed;
               var aaa= document.getElementById("demo").innerHTML = obj.drone_id;
               console.log(aaa)
            }
        };
        xhttp.open("GET", "/drone/nav_logs_json?drone=<%= @drone.id%>", true);
        xhttp.send();
    }
</script>

</body>
</html>

</body>
</html>